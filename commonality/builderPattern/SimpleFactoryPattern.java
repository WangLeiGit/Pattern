package com.rxjava.commonality.builderPattern;

/**
 * 作者：wanglei on 17/10/23 15:17
 * 邮箱：229846388@qq.com
 * 建造者模式
 * 定义:
 * 1.将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
 * 主要作用:
 * 1.在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象
 * 2.用户只需要给出指定复杂对象的类型和内容；
 * 3.建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)
 * 解决的问题:
 * 1.方便用户创建复杂的对象（不需要知道实现过程）
 * 2.代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
 * 模式讲解：
 * 指挥者（Director）直接和客户（Client）进行需求沟通；
 * 沟通后指挥者将客户创建产品的需求划分为各个部件的建造请求（Builder）；
 * 将各个部件的建造请求委派到具体的建造者（ConcreteBuilder）；
 * 各个具体建造者负责进行产品部件的构建；
 * 最终构建成具体产品（Product）。
 * 实例讲解:
 * 背景：小成希望去电脑城买一台组装的台式主机
 * 过程：
 * 电脑城老板（Diretor）和小成（Client）进行需求沟通（买来打游戏？学习？看片？）
 * 了解需求后，电脑城老板将小成需要的主机划分为各个部件（Builder）的建造请求（CPU、主板blabla）
 * 指挥装机人员（ConcreteBuilder）去构建组件；
 * 将组件组装起来成小成需要的电脑（Product）
 */
public class SimpleFactoryPattern {
    public static void main(String[] args){
        //找到该店的老板和装机人员
        Director director = new Director();
        Builder Builder = new ConcreteBuilder();
        //沟通需求后，老板叫装机人员去装电脑
        director.Construct(Builder);
        //装完后，组装人员搬来组装好的电脑
        Computer computer = Builder.GetComputer();
        //组装人员展示电脑给小成看
        computer.show();
    }
}

/***
 * 结果:
 * CPU OK
 * Mainboard OK
 * HD OK
 * 电脑组装完成，请验收
 * 优点:
 * 1.易于解耦 将产品本身与产品创建过程进行解耦，可以使用相同的创建过程来得到不同的产品。也就说细节依赖抽象。
 * 2.易于精确控制对象的创建 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.
 * 3.易于拓展 增加新的具体建造者无需修改原有类库的代码，易于拓展，符合“开闭原则“。
 * 缺点:
 * 1.建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。
 * 2.如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。
 * 应用场景:
 * 1.需要生成的产品对象有复杂的内部结构，这些产品对象具备共性；
 * 2.隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。
 */
